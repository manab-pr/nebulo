name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test ./...
    
    - name: Build binaries for multiple platforms
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Build for different platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          platform_split=(${platform//\// })
          GOOS=${platform_split[0]}
          GOARCH=${platform_split[1]}
          
          # Build main server
          output_name="nebulo-server-$GOOS-$GOARCH"
          if [ $GOOS = "windows" ]; then
            output_name+='.exe'
          fi
          
          echo "Building $output_name..."
          env GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build \
            -ldflags="-w -s -X main.version=${{ github.ref_name }}" \
            -o dist/$output_name \
            cmd/server/main.go
          
          # Build device server
          device_output_name="nebulo-device-$GOOS-$GOARCH"
          if [ $GOOS = "windows" ]; then
            device_output_name+='.exe'
          fi
          
          echo "Building $device_output_name..."
          env GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build \
            -ldflags="-w -s -X main.version=${{ github.ref_name }}" \
            -o dist/$device_output_name \
            cmd/device-server/main.go
        done
    
    - name: Create release archives
      run: |
        cd dist
        for file in *; do
          if [[ "$file" == *"windows"* ]]; then
            zip "${file%.*}.zip" "$file"
            rm "$file"
          else
            tar -czf "${file}.tar.gz" "$file"
            rm "$file"
          fi
        done
    
    - name: Generate changelog
      id: changelog
      uses: metcalfc/changelog-generator@v4.3.1
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          - `docker pull your-username/nebulo-server:${{ github.ref_name }}`
          - `docker pull your-username/nebulo-device:${{ github.ref_name }}`
          
          ## Installation
          
          ### Using Docker Compose (Recommended)
          ```bash
          curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/docker-compose.yml
          docker-compose up -d
          ```
          
          ### Manual Installation
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Configure your .env file
          4. Run the binary
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      run: |
        for file in dist/*; do
          echo "Uploading $file..."
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$file" \
            "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
        done

  docker-release:
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push main server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/nebulo-server:${{ github.ref_name }}
          ${{ secrets.DOCKER_USERNAME }}/nebulo-server:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push device server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.device
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/nebulo-device:${{ github.ref_name }}
          ${{ secrets.DOCKER_USERNAME }}/nebulo-device:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64